{"pageProps":{"currentData":{"slug":"basic-algebra-formula","title":"基本代数公式","scope":"<div><div>代数（Algebra）是数学的一门基础学科，主要研究数、数量、关系、结构与代数方程（组）的通用解法及其性质的数学分支。 代数的研究对象不仅是数字，而是各种抽象化的结构。</div><div>代数方程是由变量、常数、因子和变量系数组合而成的表达式。</div><div>入门的数学代数包括四个方面：整数、小数、分数、百分数。</div></div>","formula":"■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n基础概念\n■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n▶ 虚数：平方是负数或根号是负数的数（实数以外的复数），，比如 √-1\n▶ 实数：有理数和无理数的统称。数学上，实数定义为与数轴上点相对应的数（有限小数和无限小数）\n▶ 复数：实数和虚数共同构成复数\n▶ 有理数：整数（正整数，0，负整数）和分数的统称\n▶ 无理数：无限不循环小数（不能用分数表示），比如 √5，2π，lg2， sin1°\n▶ 自然数：用以计量事物件数或次序的数，即用数码 0,1,2,3,4,... 表示，也称非负整数\n▶ 常数：规定的数量与数字（确定的数，不会变）\n\n\n\n■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n代数公式\n■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■\na² – b² = (a – b)(a + b)\n(a + b)² = a² + 2ab + b²\na²+ b² = (a + b)² – 2ab\n(a – b)² = a² – 2ab + b²\n(a + b + c)² = a² + b² + c² + 2ab + 2bc + 2ca　　\n(a – b – c)² = a² + b² + c² – 2ab + 2bc – 2ca　　\n(a + b)³ = a³ + 3a²b + 3ab² + b²\n(a – b)³ = a³ – 3a²b + 3ab² – b³\na³ – b³ = (a – b)(a² + ab + b²)\na³ + b³ = (a + b)(a² – ab + b²)\n(a + b)⁴ = a⁴ + 4a³b + 6a²b² + 4ab³ + b⁴\n(a – b)⁴ = a⁴ – 4a³b + 6a²b² – 4ab³ + b⁴\na⁴– b⁴ = (a – b)(a + b)(a² +b²)\n\n\n^代表次方：\n\n(a^m)(a^n) = a^(m + n)\n(ab)^m = a^m • b^m\n(a^m)^n = a^(mn)\n\n\n■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n分数公式\n■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n(a + b ÷ c) = [(ac ÷ c) + (b ÷ c)] = (ac + b) ÷ c\n(a ÷ b + d ÷ b) = (a + d) ÷ b\n(a ÷ b + c ÷ d) = (ad + bc) ÷ (bd)\n(a ÷ b) × (c ÷ d) = (ac) ÷ (bd)\n(a ÷ b) ÷ (c ÷ d) = (a ÷ b) × (d ÷ c) = (ad) ÷ (bc)\n\n■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n百分比\n■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n是以 100 的分数表示的数值或比率。它通常用符号 % 表示。\n\n■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n整除\n■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■\na ÷ b, a 称为被除数，b 是除数。若余数为 0 ， 则 a 能被 b 整除（或者 b 能整除 a），记作 b|a\nb 叫做 a 的约数（或因数），a 叫做 b 的倍数。则 a = qb 且 b ≤ |a|\n\n\n\n■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n最大公约数\n■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n最大公因数（highest common factor，hcf）， 也称最大公约数（greatest common divisor，gcd）是数学词汇，指能够整除多个整数的最大正整数。而多个整数不能都为零。\n记作 d = GCD(a, b)\n\n▶ 例如求24和60的最大公约数：\n\n分解质因数法：\n24 = 2 × 2 × 2 × 3\n60 = 2 × 2 × 3 × 5\n\n找出这两个数的公有质因数为2，2，3，24 和 60的最大公约数就是这几个公有质因数的乘积，即 2 × 2 × 3 = 12, 12是最大公约数\n24 ÷ 12 = 2\n60 ÷ 12 = 5\n\n\n\n■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n最小公倍数\n■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■\n最小公倍数（least common multiple，lcm）是数论中的一个概念。若有一个数 X，可以被另外两个数 A、B 整除，且 X 大于（或等于）A 和 B，则 X 为 A 和 B 的公倍数。A 和 B 的公倍数有无限个，而所有正的公倍数中，最小的公倍数就叫做最小公倍数。记作 c = LCM(a, b)\n\n两个整数公有的倍数称为它们的公倍数，其中最小的一个正整数称为它们两个的最小公倍数，而最小公倍数在一般我们实际算的时候，通常是先做质因数分解，然后再依数字质因数分解后的式子，找出最小公倍数。\n\n\n▶ 例如，求[12，18，20] 的最小公倍数。因为 12 = 2² × 3，18 = 2 × 3²，20 = 2² × 5，其中三个数的公有的质因数为2，两个数的公有质因数为2与3，每个数独有的质因数为5与3，\n其中 2 对应的最高次乘幂为 2；3 对应的最高次乘幂为 2；5 对应的最高次乘幂为 1。将这些次幂乘起来，就可以得到最小公倍数：\n所以，[12，18，20] = 2² × 3² × 5 = 180\n\n\n▶ 例如，求[24, 60] 的最小公倍数(使用另一种方法，仅限2个数)。\n\n因为最大公约数为 12， 所以最小公倍数等于 (24 x 60) ÷ 12 = 120\n\n证明：\n24 = 3 x 8 = 2³ x 3\n60 = 6 x 10 = 2 x 3 x 2 x 5 = 2² x 3 x 5\n所以，[24，60] = 2³ × 3 x 5 = 120\n\n\n\n","preview":"","solution":{"javascript":{"code":"/**\n * Math 对象静态属性\n */\n/*\nMath.E\t返回算术常量 e，即自然对数的底数（约等于2.718）。\nMath.LN2\t返回 2 的自然对数（约等于0.693）。\nMath.LN10\t返回 10 的自然对数（约等于2.302）。\nMath.LOG2E\t返回以 2 为底的 e 的对数（约等于 1.4426950408889634）。\nMath.LOG10E\t返回以 10 为底的 e 的对数（约等于0.434）。\nMath.PI\t返回圆周率（约等于3.14159）。\nMath.SQRT1_2\t返回 2 的平方根的倒数（约等于 0.707）。\nMath.SQRT2\t返回 2 的平方根（约等于 1.414）。\n*/\n\n\n\n/**\n * Math 对象静态方法\n */\n/*\nMath.abs(x)\t返回 x 的绝对值。\nMath.acos(x)\t返回 x 的反余弦值。\nMath.asin(x)\t返回 x 的反正弦值。 （x以弧度为单位）\nMath.atan(x)\t以介于 -PI/2 与 PI/2 弧度之间的数值来返回 x 的反正切值。\nMath.atan2(y,x)\t返回从 x 轴到点 (x,y) 的角度（介于 -PI/2 与 PI/2 弧度之间）。\nMath.cos(x)\t返回数的余弦。\nMath.sin(x)\t返回数的正弦。\nMath.sqrt(x)\t返回数的平方根。 (square: 正方形,平方 square root: 二次根，平方根)\nMath.tan(x)\t返回角的正切。\nMath.exp(x)\t返回 Ex 的指数。\nMath.log(x)\t返回数的自然对数（底为e）。\nMath.max(x,y,z,...,n)\t返回 x,y,z,...,n 中的最高值。\nMath.min(x,y,z,...,n)\t返回 x,y,z,...,n中的最低值。\nMath.pow(x,y)\t返回 x 的 y 次幂。（x**n  相当于 Math.pow(x,n)  即x的n次方）\nMath.random()\t返回 0 ~ 1 之间的随机数。\n------\nMath.ceil(x)\t对数进行上舍入。  =&gt;    Math.ceil(2.15) = 3\nMath.floor(x)\t对 x 进行下舍入。  =&gt;    Math.floor(2.68) = 2\nMath.round(x)\t四舍五入。   =&gt;   Math.round(2.68) = 3\nMath.trunc(x) 方法会将数字的小数部分去掉，只保留整数部分。（对于数字而言，等同于parseInt()方法）\n------\nMath.hypot() 函数返回所有参数的平方和的平方根.\n\n*/\n\n\n\n/**\n * 例子\n */\nconsole.log(Math.LN2);\n/* 输出： 0.6931471805599453 */\n\nconsole.log(Math.PI);\n/* 输出：3.141592653589793  */\n\nconsole.log(Math.sqrt(4));\n/* 输出： 2 */\n\nconsole.log(Math.sqrt(1));\n/* 输出：1  */\n\nconsole.log(Math.sqrt(5));\n/* 输出：2.23606797749979  */\n\nconsole.log(Math.sin(targetAngle1));\n/* 输出：0.49999999999999994,  在数学中 sin30° 的值为 1/2  */\n\nconsole.log(Math.sin(targetAngle2));\n/* 输出：1,  在数学中 sin90° 的值为 1  */\n\nconsole.log(Math.sin(30));\n/* 输出： -0.9880316240928618  【由此验证Math.sin()内的参数并不是角度值】 */\n\nconsole.log(Math.hypot(3, 4));\n/* 输出：5， 运算：√(3² + 4²)  */\n\nconsole.log(Math.hypot(3, 4, 5));\n/* 输出：7.0710678118654755  */\n\nconsole.log(Math.hypot(-5));\n/* 输出：5  */\n\nconst radians = Math.atan2(15, 15);\n/* 输出：0.7853981633974483  */\n\nconst degrees = radians / Math.PI * 180;\n/* 45度的角  */\n\n\nconst deg360 = Math.PI * 2;\nconst targetAngle1 = deg360 / 12;\n/* 30度的角  */\n\nconst targetAngle2 = deg360 / 4;\n/* 90度的角  */\n\n\n/**\n * 查找两个数的最大公约数\n * @param {Array} arr - 输入一个数组(包含两个数)\n * @returns {Number} 返回最大公约数\n */\nfunction gcd(arr) {\n    let low = Math.min(...arr);\n    let high = Math.max(...arr);\n\n    while (high % low !== 0) {\n        /* 将余数和low替换成目前的 low 和 high */\n        [high, low] = [low, high % low];\n\n        /* 相当于：\n        const tmp = high % low;\n        high = low;\n        low = tmp;\n        */\n    }\n    return low;\n}\n\n\n/**\n * 查找两个数的最小公倍数\n * @param {Array} arr - 输入一个数组(包含两个数)\n * @returns {Number} 返回最小公倍数\n */\nfunction lcm(arr) {\n    let low = Math.min(...arr);\n    let high = Math.max(...arr);\n    return (low * high) / gcd(arr);\n}\n\n\n\n/**\n * 查找两个数的最小公倍数(第二种方法)\n * @param {Array} arr - 输入一个数组(包含两个数)\n * @returns {Number} 返回最小公倍数\n */\nfunction lcm2(arr) {\n    arr = arr.sort((a, b) =&gt; b - a);\n    let [high, low] = arr;\n    let res;\n\n    /* a 和 b 交换位置也不会影响结果 */\n    const a = arr[0], b = arr[1];\n\n    /* 创建的数组用于存储最大数的所有倍数，以便稍后检查其他 LCM, 基于 a */\n    const tempArr = Array.from({length: high}).fill(0).map( (item, i) =&gt; (i+1) * a);\n\n    /* 判断是否整除, 基于 b */\n    for (let i = 0; i &lt; tempArr.length; i++) {\n        if (tempArr[i] % b === 0) {\n            res = tempArr[i];\n            break;\n        }\n    }\n\n    return res;\n\n}\n\n\nexport { gcd, lcm, lcm2 };\n","test":"import { gcd, lcm } from './index';\n\n/* 最大公约数 */\n/* ---------- */\nconsole.log(gcd([5, 1]));\n/* 输出： 1 */\n\nconsole.log(gcd([12, 18]));\n/* 输出： 6 */\n\nconsole.log(gcd([24, 60]));\n/* 输出： 12 */\n\nconsole.log(gcd([18, 20]));\n/* 输出： 2 */\n\n\n\n/* 最小公倍数 */\n/* ---------- */\nconsole.log(lcm([5, 1]));\n/* 输出： 5 */\n/* 5 的倍数：[5,10,15,20,25] */\n\nconsole.log(lcm([12, 18]));\n/* 输出： 36 */\n/* 18 的倍数： [18,36,54,72,90,108,126,144,162,180,198,216,234,252,270,288,306,324] */\n\nconsole.log(lcm([24, 60]));\n/* 输出： 120 */\n\nconsole.log(lcm([18, 20]));\n/* 输出： 180 */"}}}},"__N_SSG":true}
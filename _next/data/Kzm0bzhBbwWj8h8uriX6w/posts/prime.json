{"pageProps":{"currentData":{"slug":"prime","title":"质数(素数)","scope":"<div><div>质数（Prime number），又称素数，指在大于1的自然数中，除了1和该数自身外，无法被其他自然数整除的数（也可定义为只有1与该数本身两个正因数的数）。大于1的自然数若不是素数，则称之为合数（也称为合成数）。</div><div>例如，5是个素数，因为其正约数只有1与5。7是个素数，因为其正约数只有1与7。而4则是个合数，因为除了1与4外，2也是其正约数。6也是个合数，因为除了1与6外，2与3也是其正约数。</div><div>前168个素数（所有小于1000的素数）为2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, ...</div></div>","formula":"公式 1：对于任意正整数 n，\n(n+1) 是素数当且仅当 n! ≡ n (mod n+1)\n\n公式 2：大于 3 的质数可以表示为：6n ± 1\n素数 ≡ ± 1 (mod 6)\n此方法不包括素数的倍数。\n\n公式 3：可以使用以下方法生成大于 40 的素数：\nn2 + n + 41","preview":"","solution":{"javascript":{"code":"\n/**\n * 判断是否是素数\n * @param {Number} num - 一个自然数\n * @returns {Number} \n */\nexport function isPrime(num) {\n    if (isNaN(num) || !isFinite(num)) return false;\n    if (num &lt; 2) return false;\n\n\n    /* 依次判断是否能被奇数整除，最大循环为数值的开方， 也可使用 Math.pow(n, 0.5) */\n    const squareRoot = Math.sqrt(num);   \n    /* 因为2已经验证过，所以从3开始；且已经排除偶数，所以每次加2 */\n    for (let i = 3; i &lt;= squareRoot; i += 2) {\n        if (num % i === 0) {\n            return false;\n        }\n    }\n\n    for (let i = 2; i &lt; num; i++) {\n        if (num % i === 0) {\n            return false;\n            break;\n        }\n\n    }\n\n    return true;\n\n}\n","test":"import { isPrime } from './index';\n\n\nconsole.log( isPrime(1) );\n/* 输出： false*/\n\nconsole.log( isPrime(2) );\n/* 输出： true */\n\nconsole.log( isPrime(6) );\n/* 输出： false */\n"}}}},"__N_SSG":true}